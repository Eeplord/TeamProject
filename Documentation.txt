///////////////////////
// App Functionality //
///////////////////////

1) Create new accounts:
	Require:
		Name
		Starting Balance
		Annual Interest Rate

	Default:
		Autogenerated Id's
		Account Information File
		Withdrawal Stack
		Deposits Stack

2) Load account:
	Require:
		Account Id

	Task:
		Search list for account Id
		Load Account Information File
		Load Withdrawal File
		Load Deposits File

3) Make Deposits:
	Require:
		Amount
		Description

	Tasks:
		Add to balance
		Print new balance
		Store Date
		Store Description

4) Make Withdrawals
	Require:
		Amount
		Description

	Tasks:
		Subtract from balance
		Print new balance
		Store Date
		Store Description

5) Apply interest:
	Tasks:
		Apply to balance
		Print new balance
		Store Date
		Change interest rate?

6) Print statement:
	Tasks:
		Print Withdrawals and Deposits

/////////////////////
// Back End Scheme //
/////////////////////

-New account creates a new folder and corresponding files 
 for withdrawl and deposit information related to account.

-Loading an account requires an id. The program then uses
 that id to find the correct folder and opens the account
 file for that id. The program then creates a new account
 object which holds the id of the account, the name of the
 owner, the balance, the annual interest, a pointer to the 
 deposits stack, a pointer to the withdrawal stack, the
 path to withdrawals data, and the path to deposits data.

-When a user tries to view account withdrawal information,
 the program opens up the file for withdrawals using the
 withdrawal data path name and creates a stack of
 withdrawals. Each withdrawal has an amount, a date, and
 a description.

-When a user tries to view account deposit information,
 the program opens up the file for deposits using the
 deposits data path name and creates a stack of deposits.
 Each deposit has an amount, a date, and a description.

-When a user makes a deposit, the programs calculates the
 new balance and saves a new entry of deposits into the
 deposits data file.

-When a user makes a withdraw, the programs calculates the
 new balance and saves a new entry of withdrawal into the
 withdrawals data file.

/////////////
// Classes //
/////////////

////
// Accounts
/////////////

class Account {
private:

	// Id of the account
	Id id_;

	// Name of owner
	Name name_;

	// Balance
	Balance balance_;

	// Annual interest rate
	Interest annualInterestRate_;

	// Path to withdrawl information
	std::string withdrawalDataPath_;

	// Path to deposits information
	std::string depositDataPath_;

	// Withdrawals
	std::stack<Withdrawals> withdrawals_;

	// Deposits
	std::stack<Deposits> deposits_;

	// Saves the account into an encrypted txt file
	void save();

	// Loads the account and decrypt
	void load();


public:
	
	// TODO: Constructors

	// Returns the id_ of the account
	int getId();

	// Returns the full name of the owner
	std::string getFullName();

	// Returns the first name of the owner
	std::string getFirstName();

	// Returns the last name of the owner
	std::string getFullName();

	// Returns the balance
	double getBalance();

	// Returns the yearly interest rate
	double getYearlyInterest();

	// Returns the monthly interest rate
	double getMonthlyInterest();

	// Returns new balance after yearly interest
	double applyYearlyInterest();

	// Returns new balance after monthly interest
	double applyMonthlyInterest();

	// Returns new balance after withdraw
	double withdraw(double amount);

	// Returns new balance after deposit
	double deposit(double amount);
}

////
// Id
/////////////

class Id {
private:

	// Generates an id for each new account
	static int idGenerator_ = 0;

	// The id of the account
	int id_;

public:
	
	// Set id_ = idGenerator++ everytime it's called
	Id();

	// Returns id_ of the account
	int getId();
}

////
// Name
/////////////

class Name {
private:
	std::string firstName_;
	std::string lastName_;

public:
	
	// Takes a full name and parse for first and last name
	Name(std::string fullName);

	// Returns first name
	std::string getFirstName();

	// Returns last name
	std::string getLastName();

	// Returns full name
	std::string getFullName();

	// Prints first name
	void printFirstName();

	// Prints last name
	void printLastName();

	// Prints full name
	void printFullName();
}

////
// Balance
/////////////

class Balance {
private:
	double balance_;

public:
	
	// Initializes balance to arg
	Balance(double amount);

	// Returns balance
	std::string getBalance();

	// Prints balance
	void printBalance();
}

////
// Interest
/////////////

class Interest {
private:
	double annualInterestRate_;

public:

	// Applies annual interest to the balance and returns it
	Balance applyAnnualInterest(Balance balance);

	// Applies monthly interest to the balance and returns it
	Balance applyMonthlyInterest(Balance balance);

	// Returns annual interest rate
	double getAnnualInterestRate();

	// Change annual interest rate
	void setAnnualInterestRate(double amount);
}

////
// Transactions
/////////////

class Transactions {
private:
	double amount;
	Date date;
	std::string description;

public:
	void printAmount();
	void printDescription();
	void printDate();
}

////
// Withdrawals
/////////////

class Withdrawals : public Transactions {
private:

	// Amount withdrawed
	double amount;

	// Date of withdrawal
	Date date;

	// Description of the transaction
	std::string description;

public:

	void printAmount();
	void printDescription();
	void printDate();
}

////
// Deposits
/////////////

class Deposits : public Transactions {
private:

	// Amount deposited
	double amount;

	// Date of deposit
	Date date;

	// Description of the transaction
	std::string description;

public:

	void printAmount();
	void printDescription();
	void printDate();
}

////
// Date
/////////////

class Date {
private:
	int day_;
	int month_;
	int year_;

public:
	// TODO: Methods for date class
}

